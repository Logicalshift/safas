;;;
;;; For instructions that have a zero-page variant, assembles the 8 or 16-bit version as required
;;;
(def zero_page 
    (fun (absolute op8 op16)
        (if ( (< absolute $100) )
            ( (d op8) (d (bits 8 absolute)) )
            ( (d op16) (d (bits 16 absolute)) )
        )
    )
)

(def_syntax assemble_6502 (
        (brk)                   ((a 0 8) (d $00u8))

        (adc #<immediate>)      ( (a 0 8) (d $69u8) (d (bits 8 immediate)) )
        (adc <absolute>)        ( (a 0 8) (zero_page absolute $65u8 $6du8) )
        (adc <absolute>, X)     ( (a 0 8) (zero_page absolute $75u8 $7du8) )
        (adc <absolute>, Y)     ( (a 0 8) (d $79u8) (d (bits 16 absolute)) )
        (adc (<indirect>, X))   ( (a 0 8) (d $61u8) (d (bits 8 indirect)) )
        (adc (<indirect>), Y)   ( (a 0 8) (d $71u8) (d (bits 8 indirect)) )

        (and #<immediate>)      ( (a 0 8) (d $29u8) (d (bits 8 immediate)) )
        (and <absolute>)        ( (a 0 8) (zero_page absolute $25u8 $2du8) )
        (and <absolute>, X)     ( (a 0 8) (zero_page absolute $35u8 $3du8) )
        (and <absolute>, Y)     ( (a 0 8) (d $39u8) (d (bits 16 absolute)) )
        (and (<indirect>, X))   ( (a 0 8) (d $21u8) (d (bits 8 indirect)) )
        (and (<indirect>), Y)   ( (a 0 8) (d $31u8) (d (bits 8 indirect)) )

        (bne <addr>)            ( (a 0 8) (d $d0u8) (d (bits 8 (- addr ip 1))) )

        (cpx #<immediate>)      ( (a 0 8) (d $e0u8) (d (bits 8 immediate)) )
        (cpx <absolute>)        ( (a 0 8) (zero_page absolute $e4u8 $ecu8) )

        (cpy #<immediate>)      ( (a 0 8) (d $c0u8) (d (bits 8 immediate)) )
        (cpy <absolute>)        ( (a 0 8) (zero_page absolute $c4u8 $ccu8) )

        (inx)                   ( (a 0 8) (d $e8u8))

        (lda #<immediate>)      ( (a 0 8) (d $a9u8) (d (bits 8 immediate)) )
        (lda <absolute>)        ( (a 0 8) (zero_page absolute $a5u8 $adu8) )
        (lda <absolute>, X)     ( (a 0 8) (zero_page absolute $b5u8 $bdu8) )
        (lda <absolute>, Y)     ( (a 0 8) (d $b9u8) (d (bits 16 absolute)) )
        (lda (<indirect>, X))   ( (a 0 8) (d $a1u8) (d (bits 8 indirect)) )
        (lda (<indirect>), Y)   ( (a 0 8) (d $b1u8) (d (bits 8 indirect)) )

        (ldx #<immediate>)      ( (a 0 8) (d $a2u8) (d (bits 8 immediate)) )
        (ldx <absolute>)        ( (a 0 8) (zero_page absolute $a6u8 $aeu8) )
        (ldx <absolute>, Y)     ( (a 0 8) (zero_page absolute $b6u8 $beu8) )

        (jsr <addr>)            ( (a 0 8) (d $20u8) (d (bits 16 addr)))

        (ora #<immediate>)      ( (a 0 8) (d $09u8) (d (bits 8 immediate)) )
        (ora <absolute>)        ( (a 0 8) (zero_page absolute $05u8 $0du8) )
        (ora <absolute>, X)     ( (a 0 8) (zero_page absolute $15u8 $1du8) )
        (ora <absolute>, Y)     ( (a 0 8) (d $19u8) (d (bits 16 absolute)) )
        (ora (<indirect>, X))   ( (a 0 8) (d $01u8) (d (bits 8 indirect)) )
        (ora (<indirect>), Y)   ( (a 0 8) (d $11u8) (d (bits 8 indirect)) )

        (rts)                   ( (a 0 8) (d $60u8) )
    )
)

(export assemble_6502)
