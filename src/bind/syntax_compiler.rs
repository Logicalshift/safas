use super::bind_error::*;

use crate::meta::*;
use crate::exec::*;

///
/// A syntax compiler describes the actions needed to compile a piece of syntax into a series of actions
/// 
/// There are two components. The binding monad binds all of the cells to their bound values. The action
/// takes the result of the binding and applies it to generate the actions required to execute the syntax
///
pub struct SyntaxCompiler {
    /// Generates the actions for the bound syntax
    generate_actions: Box<dyn Fn() -> Result<CompiledActions, BindError>+Send+Sync>,

    /// The reference type of the result generated by this compiler
    reference_type: ReferenceType
}

impl Default for SyntaxCompiler {
    fn default() -> SyntaxCompiler {
        // Default syntax compiler compiles nothing
        SyntaxCompiler {
            generate_actions:   Box::new(|| Ok(CompiledActions::empty())),
            reference_type:     ReferenceType::Value
        }
    }
}

impl SyntaxCompiler {
    ///
    /// Creates a simple syntax compiler that generates actions from a cell
    ///
    pub fn with_compiler<ActionFn>(generate_actions: ActionFn, parameter: CellRef) -> SyntaxCompiler 
    where ActionFn: 'static+Fn(CellRef) -> Result<CompiledActions, BindError>+Send+Sync {
        Self::with_compiler_and_reftype(generate_actions, parameter, ReferenceType::Value)
    }

    ///
    /// Creates a simple syntax compiler that generates actions from a cell
    ///
    pub fn with_compiler_and_reftype<ActionFn>(generate_actions: ActionFn, parameter: CellRef, reference_type: ReferenceType) -> SyntaxCompiler 
    where ActionFn: 'static+Fn(CellRef) -> Result<CompiledActions, BindError>+Send+Sync {
        SyntaxCompiler {
            generate_actions:   Box::new(move || generate_actions(parameter.clone())),
            reference_type:     reference_type
        }
    }

    ///
    /// Retrieves the reference type of the value this compiler will generate
    ///
    pub fn reference_type(&self) -> ReferenceType {
        self.reference_type
    }

    ///
    /// Generates the actions for this compiler
    ///
    pub fn generate_actions(&self) -> Result<CompiledActions, BindError> {
        (self.generate_actions)()
    }
}
