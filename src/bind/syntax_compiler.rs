use super::bind_error::*;

use crate::meta::*;
use crate::exec::*;

use std::sync::*;

///
/// A syntax compiler describes the actions needed to compile a piece of syntax into a series of actions
/// 
/// There are two components. The binding monad binds all of the cells to their bound values. The action
/// takes the result of the binding and applies it to generate the actions required to execute the syntax
///
pub struct SyntaxCompiler {
    /// Generates the actions for the bound syntax
    generate_actions: Box<dyn Fn() -> Result<CompiledActions, BindError>+Send+Sync>,

    /// Applies a substitution algorithm to any frame references used by this compiler
    substitute_frame_refs: Box<dyn Fn(&mut dyn FnMut(FrameReference) -> Option<CellRef>) -> SyntaxCompiler+Send+Sync>,

    /// The reference type of the result generated by this compiler
    reference_type: ReferenceType
}

impl Default for SyntaxCompiler {
    fn default() -> SyntaxCompiler {
        // Default syntax compiler compiles nothing
        SyntaxCompiler {
            generate_actions:       Box::new(|| Ok(CompiledActions::empty())),
            substitute_frame_refs:  Box::new(|_| SyntaxCompiler::default()),
            reference_type:         ReferenceType::Value
        }
    }
}

impl SyntaxCompiler {
    ///
    /// Creates a syntax compiler with entirely custom functions
    /// 
    /// The `with_compiler` variants can be used with a `CellRef` in order to automatically implement the substitution function
    ///
    pub fn custom<ActionFn, SubstituteFn>(generate_actions: ActionFn, substitute_frame_refs: SubstituteFn, reference_type: ReferenceType) -> SyntaxCompiler
    where   ActionFn:       'static+Fn() -> Result<CompiledActions, BindError>+Send+Sync,
            SubstituteFn:   'static+Fn(&mut dyn FnMut(FrameReference) -> Option<CellRef>) -> SyntaxCompiler+Send+Sync {
        SyntaxCompiler {
            generate_actions:       Box::new(generate_actions),
            substitute_frame_refs:  Box::new(substitute_frame_refs),
            reference_type:         reference_type
        }
    }

    ///
    /// Creates a simple syntax compiler that generates actions from a cell
    ///
    pub fn with_compiler<ActionFn>(generate_actions: ActionFn, parameter: CellRef) -> SyntaxCompiler 
    where ActionFn: 'static+Fn(CellRef) -> Result<CompiledActions, BindError>+Send+Sync {
        Self::with_compiler_and_reftype(generate_actions, parameter, ReferenceType::Value)
    }

    ///
    /// Creates a simple syntax compiler that generates actions from a cell
    ///
    pub fn with_compiler_and_reftype<ActionFn>(generate_actions: ActionFn, parameter: CellRef, reference_type: ReferenceType) -> SyntaxCompiler 
    where ActionFn: 'static+Fn(CellRef) -> Result<CompiledActions, BindError>+Send+Sync {
        Self::with_compiler_and_reftype_arc(Arc::new(generate_actions), parameter, reference_type)
    }

    ///
    /// Creates a simple syntax compiler that generates actions from a cell
    ///
    fn with_compiler_and_reftype_arc<ActionFn>(generate_actions: Arc<ActionFn>, parameter: CellRef, reference_type: ReferenceType) -> SyntaxCompiler 
    where ActionFn: 'static+Fn(CellRef) -> Result<CompiledActions, BindError>+Send+Sync {
        // Substitution means calling substitute_frame_refs and generating a new syntax with that parameter
        let actions_for_substitute      = Arc::clone(&generate_actions);
        let parameter_for_substitute    = parameter.clone();

        // Substitutes cell values in the parameter for a new cell value
        let substitute_frame_refs       = move |get_new_frame_ref: &mut dyn FnMut(FrameReference) -> Option<CellRef>| {
            // Substitute the frame references from our parameter
            let new_parameter       = substitute_frame_refs(parameter_for_substitute.clone(), get_new_frame_ref);
            let generate_actions    = actions_for_substitute.clone();

            // Create a new syntax compiler
            SyntaxCompiler::with_compiler_and_reftype_arc(generate_actions, new_parameter, reference_type)
        };

        SyntaxCompiler {
            generate_actions:       Box::new(move || generate_actions(parameter.clone())),
            substitute_frame_refs:  Box::new(substitute_frame_refs),
            reference_type:         reference_type
        }
    }

    ///
    /// Retrieves the reference type of the value this compiler will generate
    ///
    pub fn reference_type(&self) -> ReferenceType {
        self.reference_type
    }

    ///
    /// Generates the actions for this compiler
    ///
    pub fn generate_actions(&self) -> Result<CompiledActions, BindError> {
        (self.generate_actions)()
    }

    ///
    /// Creates a new syntax compiler from this one with substituted frame references
    ///
    pub fn substitute_frame_refs<FrameRefFn>(&self, mut get_new_frame_ref: FrameRefFn) -> SyntaxCompiler 
    where FrameRefFn: FnMut(FrameReference) -> Option<CellRef> {
        (self.substitute_frame_refs)(&mut get_new_frame_ref)
    }
}

///
/// Substitutes frame references in a CellRef binding
///
pub fn substitute_frame_refs(original: CellRef, get_new_frame_ref: &mut dyn FnMut(FrameReference) -> Option<CellRef>) -> CellRef {
    match &*original {
        SafasCell::FrameReference(cell, frame, ref_type)    => if let Some(substitute) = get_new_frame_ref(FrameReference(*cell, *frame, *ref_type)) { substitute } else { original },
        SafasCell::BoundSyntax(syntax)                      => SafasCell::BoundSyntax(syntax.substitute_frame_refs(get_new_frame_ref)).into(),
        SafasCell::List(car, cdr)                           => SafasCell::List(substitute_frame_refs(car.clone(), get_new_frame_ref), substitute_frame_refs(cdr.clone(), get_new_frame_ref)).into(),
        _                                                   => original,
    }
}
